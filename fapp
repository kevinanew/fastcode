#! /usr/bin/env python3
import os

cwd = os.getcwd()
print('check src dir')
assert os.path.exists(os.path.join(cwd, 'src'))

app_name = input('flask app 的名字: ')
url_prefix = input('服务的URL前缀，包含版本号和服务的前缀, 例如 /v1/tag: ')

##################
# 创建 api 文件
##################

api_py = os.path.join(cwd, f'src/apps/{app_name}/client_api.py')
if not os.path.exists(api_py):
    print(f'创建 {api_py}')
    with open(api_py, 'w', encoding="utf-8") as _file:
        _file.write(f'''
from flask import Blueprint

from extensions.flask_api.api import class_route
from extensions.flask_api.exceptions import PermissionDenied

client_blueprint = Blueprint('client', __name__, url_prefix='{url_prefix}')


''')
    os.system(f'git add {api_py}')


service_py = os.path.join(cwd, f'src/apps/{app_name}/client_api.py')
if not os.path.exists(service_py):
    print(f'创建 {service_py}')
    with open(service_py, 'w', encoding="utf-8") as _file:
        _file.write(f'''
from flask import Blueprint

from extensions.flask_api.api import class_route

service_blueprint = Blueprint('service', __name__, url_prefix='{url_prefix}')


''')
    os.system(f'git add {service_py}')


##################
# 创建 tests 文件
##################
test_init_py = os.path.join(cwd, f'src/unittests/__init__.py')
is_empty = len(open(test_init_py).read()) == 0
if is_empty:
    print(f'创建 {test_init_py}')
    with open(test_init_py, 'w', encoding="utf-8") as _file:
        _file.write('''
from flask.testing import FlaskClient


def kong_user_header(user_id):
    return {'x-authenticated-userid': str(user_id), 'App-ID': 'test'}


class TestService:
    client: FlaskClient = None
''')
    os.system(f'git add {test_init_py}')


api_test_py = os.path.join(cwd, f'src/unittests/test_client_api.py')
if not os.path.exists(api_test_py):
    print(f'创建 {api_test_py}')
    with open(api_test_py, 'w', encoding="utf-8") as _file:
        _file.write('''
import uuid

from flask.testing import FlaskClient

from unittests import TestService
from unittests.docs import api_docs


def kong_user_header(user_id):
    return {'x-authenticated-userid': str(user_id), 'App-ID': 'test'}


class TestClientApi(TestService):
    pass

''')
    os.system(f'git add {api_test_py}')


servcie_test_py = os.path.join(cwd, f'src/unittests/test_service.py')
if not os.path.exists(service_test_py):
    print(f'创建 {service_test_py}')
    with open(service_test_py, 'w', encoding="utf-8") as _file:
        _file.write('''
import uuid

from flask.testing import FlaskClient

from unittests import TestService
from unittests.docs import api_docs


class TestServiceApi(TestService):
    pass
    
''')
    os.system(f'git add {servcie_test_py}')
